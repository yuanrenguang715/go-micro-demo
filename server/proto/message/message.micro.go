// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	SendRequest
	SendReply
	Empty
	ReceiveReply
	UserInfo
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MessSrv service

type MessSrvService interface {
	// 发送
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendReply, error)
	// 接收
	Receive(ctx context.Context, in *Empty, opts ...client.CallOption) (*ReceiveReply, error)
}

type messSrvService struct {
	c    client.Client
	name string
}

func NewMessSrvService(name string, c client.Client) MessSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "message"
	}
	return &messSrvService{
		c:    c,
		name: name,
	}
}

func (c *messSrvService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendReply, error) {
	req := c.c.NewRequest(c.name, "MessSrv.Send", in)
	out := new(SendReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messSrvService) Receive(ctx context.Context, in *Empty, opts ...client.CallOption) (*ReceiveReply, error) {
	req := c.c.NewRequest(c.name, "MessSrv.Receive", in)
	out := new(ReceiveReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessSrv service

type MessSrvHandler interface {
	// 发送
	Send(context.Context, *SendRequest, *SendReply) error
	// 接收
	Receive(context.Context, *Empty, *ReceiveReply) error
}

func RegisterMessSrvHandler(s server.Server, hdlr MessSrvHandler, opts ...server.HandlerOption) error {
	type messSrv interface {
		Send(ctx context.Context, in *SendRequest, out *SendReply) error
		Receive(ctx context.Context, in *Empty, out *ReceiveReply) error
	}
	type MessSrv struct {
		messSrv
	}
	h := &messSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&MessSrv{h}, opts...))
}

type messSrvHandler struct {
	MessSrvHandler
}

func (h *messSrvHandler) Send(ctx context.Context, in *SendRequest, out *SendReply) error {
	return h.MessSrvHandler.Send(ctx, in, out)
}

func (h *messSrvHandler) Receive(ctx context.Context, in *Empty, out *ReceiveReply) error {
	return h.MessSrvHandler.Receive(ctx, in, out)
}
